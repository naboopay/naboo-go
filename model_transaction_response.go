/*
NabooApi V1

Here you have the first version of the naboo api to create checkout automatically

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package naboo

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TransactionResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionResponse{}

// TransactionResponse struct for TransactionResponse
type TransactionResponse struct {
	OrderId string `json:"order_id"`
	MethodOfPayment []string `json:"method_of_payment"`
	Amount *int32 `json:"amount,omitempty"`
	AmountToPay *int32 `json:"amount_to_pay,omitempty"`
	Currency string `json:"currency"`
	CreatedAt string `json:"created_at"`
	TransactionStatus *string `json:"transaction_status,omitempty"`
	IsEscrow *bool `json:"is_escrow,omitempty"`
	IsMerchant *bool `json:"is_merchant,omitempty"`
	CheckoutUrl string `json:"checkout_url"`
}

type _TransactionResponse TransactionResponse

// NewTransactionResponse instantiates a new TransactionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionResponse(orderId string, methodOfPayment []string, currency string, createdAt string, checkoutUrl string) *TransactionResponse {
	this := TransactionResponse{}
	this.OrderId = orderId
	this.MethodOfPayment = methodOfPayment
	var amount int32 = 0
	this.Amount = &amount
	var amountToPay int32 = 0
	this.AmountToPay = &amountToPay
	this.Currency = currency
	this.CreatedAt = createdAt
	var transactionStatus string = "pending"
	this.TransactionStatus = &transactionStatus
	var isEscrow bool = false
	this.IsEscrow = &isEscrow
	var isMerchant bool = false
	this.IsMerchant = &isMerchant
	this.CheckoutUrl = checkoutUrl
	return &this
}

// NewTransactionResponseWithDefaults instantiates a new TransactionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionResponseWithDefaults() *TransactionResponse {
	this := TransactionResponse{}
	var amount int32 = 0
	this.Amount = &amount
	var amountToPay int32 = 0
	this.AmountToPay = &amountToPay
	var transactionStatus string = "pending"
	this.TransactionStatus = &transactionStatus
	var isEscrow bool = false
	this.IsEscrow = &isEscrow
	var isMerchant bool = false
	this.IsMerchant = &isMerchant
	return &this
}

// GetOrderId returns the OrderId field value
func (o *TransactionResponse) GetOrderId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrderId
}

// GetOrderIdOk returns a tuple with the OrderId field value
// and a boolean to check if the value has been set.
func (o *TransactionResponse) GetOrderIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrderId, true
}

// SetOrderId sets field value
func (o *TransactionResponse) SetOrderId(v string) {
	o.OrderId = v
}

// GetMethodOfPayment returns the MethodOfPayment field value
func (o *TransactionResponse) GetMethodOfPayment() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.MethodOfPayment
}

// GetMethodOfPaymentOk returns a tuple with the MethodOfPayment field value
// and a boolean to check if the value has been set.
func (o *TransactionResponse) GetMethodOfPaymentOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MethodOfPayment, true
}

// SetMethodOfPayment sets field value
func (o *TransactionResponse) SetMethodOfPayment(v []string) {
	o.MethodOfPayment = v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *TransactionResponse) GetAmount() int32 {
	if o == nil || IsNil(o.Amount) {
		var ret int32
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionResponse) GetAmountOk() (*int32, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *TransactionResponse) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given int32 and assigns it to the Amount field.
func (o *TransactionResponse) SetAmount(v int32) {
	o.Amount = &v
}

// GetAmountToPay returns the AmountToPay field value if set, zero value otherwise.
func (o *TransactionResponse) GetAmountToPay() int32 {
	if o == nil || IsNil(o.AmountToPay) {
		var ret int32
		return ret
	}
	return *o.AmountToPay
}

// GetAmountToPayOk returns a tuple with the AmountToPay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionResponse) GetAmountToPayOk() (*int32, bool) {
	if o == nil || IsNil(o.AmountToPay) {
		return nil, false
	}
	return o.AmountToPay, true
}

// HasAmountToPay returns a boolean if a field has been set.
func (o *TransactionResponse) HasAmountToPay() bool {
	if o != nil && !IsNil(o.AmountToPay) {
		return true
	}

	return false
}

// SetAmountToPay gets a reference to the given int32 and assigns it to the AmountToPay field.
func (o *TransactionResponse) SetAmountToPay(v int32) {
	o.AmountToPay = &v
}

// GetCurrency returns the Currency field value
func (o *TransactionResponse) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *TransactionResponse) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *TransactionResponse) SetCurrency(v string) {
	o.Currency = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *TransactionResponse) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *TransactionResponse) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *TransactionResponse) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetTransactionStatus returns the TransactionStatus field value if set, zero value otherwise.
func (o *TransactionResponse) GetTransactionStatus() string {
	if o == nil || IsNil(o.TransactionStatus) {
		var ret string
		return ret
	}
	return *o.TransactionStatus
}

// GetTransactionStatusOk returns a tuple with the TransactionStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionResponse) GetTransactionStatusOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionStatus) {
		return nil, false
	}
	return o.TransactionStatus, true
}

// HasTransactionStatus returns a boolean if a field has been set.
func (o *TransactionResponse) HasTransactionStatus() bool {
	if o != nil && !IsNil(o.TransactionStatus) {
		return true
	}

	return false
}

// SetTransactionStatus gets a reference to the given string and assigns it to the TransactionStatus field.
func (o *TransactionResponse) SetTransactionStatus(v string) {
	o.TransactionStatus = &v
}

// GetIsEscrow returns the IsEscrow field value if set, zero value otherwise.
func (o *TransactionResponse) GetIsEscrow() bool {
	if o == nil || IsNil(o.IsEscrow) {
		var ret bool
		return ret
	}
	return *o.IsEscrow
}

// GetIsEscrowOk returns a tuple with the IsEscrow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionResponse) GetIsEscrowOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEscrow) {
		return nil, false
	}
	return o.IsEscrow, true
}

// HasIsEscrow returns a boolean if a field has been set.
func (o *TransactionResponse) HasIsEscrow() bool {
	if o != nil && !IsNil(o.IsEscrow) {
		return true
	}

	return false
}

// SetIsEscrow gets a reference to the given bool and assigns it to the IsEscrow field.
func (o *TransactionResponse) SetIsEscrow(v bool) {
	o.IsEscrow = &v
}

// GetIsMerchant returns the IsMerchant field value if set, zero value otherwise.
func (o *TransactionResponse) GetIsMerchant() bool {
	if o == nil || IsNil(o.IsMerchant) {
		var ret bool
		return ret
	}
	return *o.IsMerchant
}

// GetIsMerchantOk returns a tuple with the IsMerchant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionResponse) GetIsMerchantOk() (*bool, bool) {
	if o == nil || IsNil(o.IsMerchant) {
		return nil, false
	}
	return o.IsMerchant, true
}

// HasIsMerchant returns a boolean if a field has been set.
func (o *TransactionResponse) HasIsMerchant() bool {
	if o != nil && !IsNil(o.IsMerchant) {
		return true
	}

	return false
}

// SetIsMerchant gets a reference to the given bool and assigns it to the IsMerchant field.
func (o *TransactionResponse) SetIsMerchant(v bool) {
	o.IsMerchant = &v
}

// GetCheckoutUrl returns the CheckoutUrl field value
func (o *TransactionResponse) GetCheckoutUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CheckoutUrl
}

// GetCheckoutUrlOk returns a tuple with the CheckoutUrl field value
// and a boolean to check if the value has been set.
func (o *TransactionResponse) GetCheckoutUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CheckoutUrl, true
}

// SetCheckoutUrl sets field value
func (o *TransactionResponse) SetCheckoutUrl(v string) {
	o.CheckoutUrl = v
}

func (o TransactionResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["order_id"] = o.OrderId
	toSerialize["method_of_payment"] = o.MethodOfPayment
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.AmountToPay) {
		toSerialize["amount_to_pay"] = o.AmountToPay
	}
	toSerialize["currency"] = o.Currency
	toSerialize["created_at"] = o.CreatedAt
	if !IsNil(o.TransactionStatus) {
		toSerialize["transaction_status"] = o.TransactionStatus
	}
	if !IsNil(o.IsEscrow) {
		toSerialize["is_escrow"] = o.IsEscrow
	}
	if !IsNil(o.IsMerchant) {
		toSerialize["is_merchant"] = o.IsMerchant
	}
	toSerialize["checkout_url"] = o.CheckoutUrl
	return toSerialize, nil
}

func (o *TransactionResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"order_id",
		"method_of_payment",
		"currency",
		"created_at",
		"checkout_url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransactionResponse := _TransactionResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransactionResponse)

	if err != nil {
		return err
	}

	*o = TransactionResponse(varTransactionResponse)

	return err
}

type NullableTransactionResponse struct {
	value *TransactionResponse
	isSet bool
}

func (v NullableTransactionResponse) Get() *TransactionResponse {
	return v.value
}

func (v *NullableTransactionResponse) Set(val *TransactionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionResponse(val *TransactionResponse) *NullableTransactionResponse {
	return &NullableTransactionResponse{value: val, isSet: true}
}

func (v NullableTransactionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


