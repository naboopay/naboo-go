/*
NabooApi V1

Here you have the first version of the naboo api to create checkout automatically

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package naboo

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CashOutResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CashOutResponse{}

// CashOutResponse struct for CashOutResponse
type CashOutResponse struct {
	PhoneNumber string `json:"phone_number"`
	Amount int32 `json:"amount"`
	FullName string `json:"full_name"`
	Status TransactionStatusEnum `json:"status"`
}

type _CashOutResponse CashOutResponse

// NewCashOutResponse instantiates a new CashOutResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCashOutResponse(phoneNumber string, amount int32, fullName string, status TransactionStatusEnum) *CashOutResponse {
	this := CashOutResponse{}
	this.PhoneNumber = phoneNumber
	this.Amount = amount
	this.FullName = fullName
	this.Status = status
	return &this
}

// NewCashOutResponseWithDefaults instantiates a new CashOutResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCashOutResponseWithDefaults() *CashOutResponse {
	this := CashOutResponse{}
	return &this
}

// GetPhoneNumber returns the PhoneNumber field value
func (o *CashOutResponse) GetPhoneNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PhoneNumber
}

// GetPhoneNumberOk returns a tuple with the PhoneNumber field value
// and a boolean to check if the value has been set.
func (o *CashOutResponse) GetPhoneNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PhoneNumber, true
}

// SetPhoneNumber sets field value
func (o *CashOutResponse) SetPhoneNumber(v string) {
	o.PhoneNumber = v
}

// GetAmount returns the Amount field value
func (o *CashOutResponse) GetAmount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *CashOutResponse) GetAmountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *CashOutResponse) SetAmount(v int32) {
	o.Amount = v
}

// GetFullName returns the FullName field value
func (o *CashOutResponse) GetFullName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FullName
}

// GetFullNameOk returns a tuple with the FullName field value
// and a boolean to check if the value has been set.
func (o *CashOutResponse) GetFullNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FullName, true
}

// SetFullName sets field value
func (o *CashOutResponse) SetFullName(v string) {
	o.FullName = v
}

// GetStatus returns the Status field value
func (o *CashOutResponse) GetStatus() TransactionStatusEnum {
	if o == nil {
		var ret TransactionStatusEnum
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *CashOutResponse) GetStatusOk() (*TransactionStatusEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *CashOutResponse) SetStatus(v TransactionStatusEnum) {
	o.Status = v
}

func (o CashOutResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CashOutResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["phone_number"] = o.PhoneNumber
	toSerialize["amount"] = o.Amount
	toSerialize["full_name"] = o.FullName
	toSerialize["status"] = o.Status
	return toSerialize, nil
}

func (o *CashOutResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"phone_number",
		"amount",
		"full_name",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCashOutResponse := _CashOutResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCashOutResponse)

	if err != nil {
		return err
	}

	*o = CashOutResponse(varCashOutResponse)

	return err
}

type NullableCashOutResponse struct {
	value *CashOutResponse
	isSet bool
}

func (v NullableCashOutResponse) Get() *CashOutResponse {
	return v.value
}

func (v *NullableCashOutResponse) Set(val *CashOutResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCashOutResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCashOutResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCashOutResponse(val *CashOutResponse) *NullableCashOutResponse {
	return &NullableCashOutResponse{value: val, isSet: true}
}

func (v NullableCashOutResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCashOutResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


