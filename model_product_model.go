/*
NabooApi V1

Here you have the first version of the naboo api to create checkout automatically

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package naboo

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ProductModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductModel{}

// ProductModel struct for ProductModel
type ProductModel struct {
	Name string `json:"name"`
	Category string `json:"category"`
	Amount int32 `json:"amount"`
	Quantity int32 `json:"quantity"`
	Description string `json:"description"`
}

type _ProductModel ProductModel

// NewProductModel instantiates a new ProductModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductModel(name string, category string, amount int32, quantity int32, description string) *ProductModel {
	this := ProductModel{}
	this.Name = name
	this.Category = category
	this.Amount = amount
	this.Quantity = quantity
	this.Description = description
	return &this
}

// NewProductModelWithDefaults instantiates a new ProductModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductModelWithDefaults() *ProductModel {
	this := ProductModel{}
	return &this
}

// GetName returns the Name field value
func (o *ProductModel) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ProductModel) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ProductModel) SetName(v string) {
	o.Name = v
}

// GetCategory returns the Category field value
func (o *ProductModel) GetCategory() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value
// and a boolean to check if the value has been set.
func (o *ProductModel) GetCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Category, true
}

// SetCategory sets field value
func (o *ProductModel) SetCategory(v string) {
	o.Category = v
}

// GetAmount returns the Amount field value
func (o *ProductModel) GetAmount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *ProductModel) GetAmountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *ProductModel) SetAmount(v int32) {
	o.Amount = v
}

// GetQuantity returns the Quantity field value
func (o *ProductModel) GetQuantity() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value
// and a boolean to check if the value has been set.
func (o *ProductModel) GetQuantityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Quantity, true
}

// SetQuantity sets field value
func (o *ProductModel) SetQuantity(v int32) {
	o.Quantity = v
}

// GetDescription returns the Description field value
func (o *ProductModel) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *ProductModel) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *ProductModel) SetDescription(v string) {
	o.Description = v
}

func (o ProductModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["category"] = o.Category
	toSerialize["amount"] = o.Amount
	toSerialize["quantity"] = o.Quantity
	toSerialize["description"] = o.Description
	return toSerialize, nil
}

func (o *ProductModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"category",
		"amount",
		"quantity",
		"description",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProductModel := _ProductModel{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProductModel)

	if err != nil {
		return err
	}

	*o = ProductModel(varProductModel)

	return err
}

type NullableProductModel struct {
	value *ProductModel
	isSet bool
}

func (v NullableProductModel) Get() *ProductModel {
	return v.value
}

func (v *NullableProductModel) Set(val *ProductModel) {
	v.value = val
	v.isSet = true
}

func (v NullableProductModel) IsSet() bool {
	return v.isSet
}

func (v *NullableProductModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductModel(val *ProductModel) *NullableProductModel {
	return &NullableProductModel{value: val, isSet: true}
}

func (v NullableProductModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


