/*
NabooApi V1

Here you have the first version of the naboo api to create checkout automatically

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package naboo

import (
	"encoding/json"
	"fmt"
)

// TransactionStatusEnum the model 'TransactionStatusEnum'
type TransactionStatusEnum string

// List of TransactionStatusEnum
const (
	PENDING TransactionStatusEnum = "pending"
	PAID TransactionStatusEnum = "paid"
	DONE TransactionStatusEnum = "done"
	PART_PAID TransactionStatusEnum = "part_paid"
)

// All allowed values of TransactionStatusEnum enum
var AllowedTransactionStatusEnumEnumValues = []TransactionStatusEnum{
	"pending",
	"paid",
	"done",
	"part_paid",
}

func (v *TransactionStatusEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TransactionStatusEnum(value)
	for _, existing := range AllowedTransactionStatusEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TransactionStatusEnum", value)
}

// NewTransactionStatusEnumFromValue returns a pointer to a valid TransactionStatusEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTransactionStatusEnumFromValue(v string) (*TransactionStatusEnum, error) {
	ev := TransactionStatusEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TransactionStatusEnum: valid values are %v", v, AllowedTransactionStatusEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TransactionStatusEnum) IsValid() bool {
	for _, existing := range AllowedTransactionStatusEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TransactionStatusEnum value
func (v TransactionStatusEnum) Ptr() *TransactionStatusEnum {
	return &v
}

type NullableTransactionStatusEnum struct {
	value *TransactionStatusEnum
	isSet bool
}

func (v NullableTransactionStatusEnum) Get() *TransactionStatusEnum {
	return v.value
}

func (v *NullableTransactionStatusEnum) Set(val *TransactionStatusEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionStatusEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionStatusEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionStatusEnum(val *TransactionStatusEnum) *NullableTransactionStatusEnum {
	return &NullableTransactionStatusEnum{value: val, isSet: true}
}

func (v NullableTransactionStatusEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionStatusEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

