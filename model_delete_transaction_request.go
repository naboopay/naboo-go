/*
NabooApi V1

Here you have the first version of the naboo api to create checkout automatically

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package naboo

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DeleteTransactionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeleteTransactionRequest{}

// DeleteTransactionRequest struct for DeleteTransactionRequest
type DeleteTransactionRequest struct {
	OrderId string `json:"order_id"`
}

type _DeleteTransactionRequest DeleteTransactionRequest

// NewDeleteTransactionRequest instantiates a new DeleteTransactionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteTransactionRequest(orderId string) *DeleteTransactionRequest {
	this := DeleteTransactionRequest{}
	this.OrderId = orderId
	return &this
}

// NewDeleteTransactionRequestWithDefaults instantiates a new DeleteTransactionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteTransactionRequestWithDefaults() *DeleteTransactionRequest {
	this := DeleteTransactionRequest{}
	return &this
}

// GetOrderId returns the OrderId field value
func (o *DeleteTransactionRequest) GetOrderId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrderId
}

// GetOrderIdOk returns a tuple with the OrderId field value
// and a boolean to check if the value has been set.
func (o *DeleteTransactionRequest) GetOrderIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrderId, true
}

// SetOrderId sets field value
func (o *DeleteTransactionRequest) SetOrderId(v string) {
	o.OrderId = v
}

func (o DeleteTransactionRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeleteTransactionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["order_id"] = o.OrderId
	return toSerialize, nil
}

func (o *DeleteTransactionRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"order_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeleteTransactionRequest := _DeleteTransactionRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDeleteTransactionRequest)

	if err != nil {
		return err
	}

	*o = DeleteTransactionRequest(varDeleteTransactionRequest)

	return err
}

type NullableDeleteTransactionRequest struct {
	value *DeleteTransactionRequest
	isSet bool
}

func (v NullableDeleteTransactionRequest) Get() *DeleteTransactionRequest {
	return v.value
}

func (v *NullableDeleteTransactionRequest) Set(val *DeleteTransactionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteTransactionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteTransactionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteTransactionRequest(val *DeleteTransactionRequest) *NullableDeleteTransactionRequest {
	return &NullableDeleteTransactionRequest{value: val, isSet: true}
}

func (v NullableDeleteTransactionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteTransactionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


