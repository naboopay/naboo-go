/*
NabooApi V1

Here you have the first version of the naboo api to create checkout automatically

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package naboo

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// CashoutServiceService CashoutService service
type CashoutServiceService service

type ApiCashOutOrangeMoneyCashoutOrangeMoneyPostRequest struct {
	ctx context.Context
	ApiService *CashoutServiceService
	cashOutOrangeRequest *CashOutOrangeRequest
}

func (r ApiCashOutOrangeMoneyCashoutOrangeMoneyPostRequest) CashOutOrangeRequest(cashOutOrangeRequest CashOutOrangeRequest) ApiCashOutOrangeMoneyCashoutOrangeMoneyPostRequest {
	r.cashOutOrangeRequest = &cashOutOrangeRequest
	return r
}

func (r ApiCashOutOrangeMoneyCashoutOrangeMoneyPostRequest) Execute() (*CashOutResponse, *http.Response, error) {
	return r.ApiService.CashOutOrangeMoneyCashoutOrangeMoneyPostExecute(r)
}

/*
CashOutOrangeMoneyCashoutOrangeMoneyPost Cash Out Orange Money

This endpoint enables a user to withdraw funds from their NabooPay account to their Orange Money account. Authentication is required, and users with the 'dev' role are not permitted to perform this operation. The amount to be withdrawn must be positive and within the user's available balance. The user's account must be active and registered in the system. After validation, the user's account balance is adjusted accordingly, and the transaction is logged for record-keeping.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCashOutOrangeMoneyCashoutOrangeMoneyPostRequest
*/
func (a *CashoutServiceService) CashOutOrangeMoneyCashoutOrangeMoneyPost(ctx context.Context) ApiCashOutOrangeMoneyCashoutOrangeMoneyPostRequest {
	return ApiCashOutOrangeMoneyCashoutOrangeMoneyPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CashOutResponse
func (a *CashoutServiceService) CashOutOrangeMoneyCashoutOrangeMoneyPostExecute(r ApiCashOutOrangeMoneyCashoutOrangeMoneyPostRequest) (*CashOutResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CashOutResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CashoutServiceService.CashOutOrangeMoneyCashoutOrangeMoneyPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cashout/orange-money"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.cashOutOrangeRequest == nil {
		return localVarReturnValue, nil, reportError("cashOutOrangeRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.cashOutOrangeRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCashOutWaveCashoutWavePostRequest struct {
	ctx context.Context
	ApiService *CashoutServiceService
	cashOutWaveRequest *CashOutWaveRequest
}

func (r ApiCashOutWaveCashoutWavePostRequest) CashOutWaveRequest(cashOutWaveRequest CashOutWaveRequest) ApiCashOutWaveCashoutWavePostRequest {
	r.cashOutWaveRequest = &cashOutWaveRequest
	return r
}

func (r ApiCashOutWaveCashoutWavePostRequest) Execute() (*CashOutResponse, *http.Response, error) {
	return r.ApiService.CashOutWaveCashoutWavePostExecute(r)
}

/*
CashOutWaveCashoutWavePost Cash Out Wave

This endpoint allows a user to withdraw funds from their NabooPay account to their Wave account. The user must be authenticated and not possess the 'dev' role. The withdrawal amount must be greater than 10 and not exceed the user's account balance. The user's account must exist and be active. Upon successful validation, the system updates the user's account balance and records the transaction for tracking purposes.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCashOutWaveCashoutWavePostRequest
*/
func (a *CashoutServiceService) CashOutWaveCashoutWavePost(ctx context.Context) ApiCashOutWaveCashoutWavePostRequest {
	return ApiCashOutWaveCashoutWavePostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CashOutResponse
func (a *CashoutServiceService) CashOutWaveCashoutWavePostExecute(r ApiCashOutWaveCashoutWavePostRequest) (*CashOutResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CashOutResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CashoutServiceService.CashOutWaveCashoutWavePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cashout/wave"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.cashOutWaveRequest == nil {
		return localVarReturnValue, nil, reportError("cashOutWaveRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.cashOutWaveRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
