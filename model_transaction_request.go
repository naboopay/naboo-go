/*
NabooApi V1

Here you have the first version of the naboo api to create checkout automatically

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package naboo

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TransactionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionRequest{}

// TransactionRequest struct for TransactionRequest
type TransactionRequest struct {
	MethodOfPayment []Wallet `json:"method_of_payment"`
	Products []ProductModel `json:"products"`
	SuccessUrl NullableString `json:"success_url,omitempty" validate:"regexp=^https:\\/\\/[^\\\\s]+$"`
	ErrorUrl NullableString `json:"error_url,omitempty" validate:"regexp=^https:\\/\\/[^\\\\s]+$"`
	IsEscrow *bool `json:"is_escrow,omitempty"`
	IsMerchant *bool `json:"is_merchant,omitempty"`
}

type _TransactionRequest TransactionRequest

// NewTransactionRequest instantiates a new TransactionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionRequest(methodOfPayment []Wallet, products []ProductModel) *TransactionRequest {
	this := TransactionRequest{}
	this.MethodOfPayment = methodOfPayment
	this.Products = products
	var isEscrow bool = false
	this.IsEscrow = &isEscrow
	var isMerchant bool = false
	this.IsMerchant = &isMerchant
	return &this
}

// NewTransactionRequestWithDefaults instantiates a new TransactionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionRequestWithDefaults() *TransactionRequest {
	this := TransactionRequest{}
	var isEscrow bool = false
	this.IsEscrow = &isEscrow
	var isMerchant bool = false
	this.IsMerchant = &isMerchant
	return &this
}

// GetMethodOfPayment returns the MethodOfPayment field value
func (o *TransactionRequest) GetMethodOfPayment() []Wallet {
	if o == nil {
		var ret []Wallet
		return ret
	}

	return o.MethodOfPayment
}

// GetMethodOfPaymentOk returns a tuple with the MethodOfPayment field value
// and a boolean to check if the value has been set.
func (o *TransactionRequest) GetMethodOfPaymentOk() ([]Wallet, bool) {
	if o == nil {
		return nil, false
	}
	return o.MethodOfPayment, true
}

// SetMethodOfPayment sets field value
func (o *TransactionRequest) SetMethodOfPayment(v []Wallet) {
	o.MethodOfPayment = v
}

// GetProducts returns the Products field value
// If the value is explicit nil, the zero value for []ProductModel will be returned
func (o *TransactionRequest) GetProducts() []ProductModel {
	if o == nil {
		var ret []ProductModel
		return ret
	}

	return o.Products
}

// GetProductsOk returns a tuple with the Products field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionRequest) GetProductsOk() ([]ProductModel, bool) {
	if o == nil || IsNil(o.Products) {
		return nil, false
	}
	return o.Products, true
}

// SetProducts sets field value
func (o *TransactionRequest) SetProducts(v []ProductModel) {
	o.Products = v
}

// GetSuccessUrl returns the SuccessUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionRequest) GetSuccessUrl() string {
	if o == nil || IsNil(o.SuccessUrl.Get()) {
		var ret string
		return ret
	}
	return *o.SuccessUrl.Get()
}

// GetSuccessUrlOk returns a tuple with the SuccessUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionRequest) GetSuccessUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SuccessUrl.Get(), o.SuccessUrl.IsSet()
}

// HasSuccessUrl returns a boolean if a field has been set.
func (o *TransactionRequest) HasSuccessUrl() bool {
	if o != nil && o.SuccessUrl.IsSet() {
		return true
	}

	return false
}

// SetSuccessUrl gets a reference to the given NullableString and assigns it to the SuccessUrl field.
func (o *TransactionRequest) SetSuccessUrl(v string) {
	o.SuccessUrl.Set(&v)
}
// SetSuccessUrlNil sets the value for SuccessUrl to be an explicit nil
func (o *TransactionRequest) SetSuccessUrlNil() {
	o.SuccessUrl.Set(nil)
}

// UnsetSuccessUrl ensures that no value is present for SuccessUrl, not even an explicit nil
func (o *TransactionRequest) UnsetSuccessUrl() {
	o.SuccessUrl.Unset()
}

// GetErrorUrl returns the ErrorUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionRequest) GetErrorUrl() string {
	if o == nil || IsNil(o.ErrorUrl.Get()) {
		var ret string
		return ret
	}
	return *o.ErrorUrl.Get()
}

// GetErrorUrlOk returns a tuple with the ErrorUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionRequest) GetErrorUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ErrorUrl.Get(), o.ErrorUrl.IsSet()
}

// HasErrorUrl returns a boolean if a field has been set.
func (o *TransactionRequest) HasErrorUrl() bool {
	if o != nil && o.ErrorUrl.IsSet() {
		return true
	}

	return false
}

// SetErrorUrl gets a reference to the given NullableString and assigns it to the ErrorUrl field.
func (o *TransactionRequest) SetErrorUrl(v string) {
	o.ErrorUrl.Set(&v)
}
// SetErrorUrlNil sets the value for ErrorUrl to be an explicit nil
func (o *TransactionRequest) SetErrorUrlNil() {
	o.ErrorUrl.Set(nil)
}

// UnsetErrorUrl ensures that no value is present for ErrorUrl, not even an explicit nil
func (o *TransactionRequest) UnsetErrorUrl() {
	o.ErrorUrl.Unset()
}

// GetIsEscrow returns the IsEscrow field value if set, zero value otherwise.
func (o *TransactionRequest) GetIsEscrow() bool {
	if o == nil || IsNil(o.IsEscrow) {
		var ret bool
		return ret
	}
	return *o.IsEscrow
}

// GetIsEscrowOk returns a tuple with the IsEscrow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionRequest) GetIsEscrowOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEscrow) {
		return nil, false
	}
	return o.IsEscrow, true
}

// HasIsEscrow returns a boolean if a field has been set.
func (o *TransactionRequest) HasIsEscrow() bool {
	if o != nil && !IsNil(o.IsEscrow) {
		return true
	}

	return false
}

// SetIsEscrow gets a reference to the given bool and assigns it to the IsEscrow field.
func (o *TransactionRequest) SetIsEscrow(v bool) {
	o.IsEscrow = &v
}

// GetIsMerchant returns the IsMerchant field value if set, zero value otherwise.
func (o *TransactionRequest) GetIsMerchant() bool {
	if o == nil || IsNil(o.IsMerchant) {
		var ret bool
		return ret
	}
	return *o.IsMerchant
}

// GetIsMerchantOk returns a tuple with the IsMerchant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionRequest) GetIsMerchantOk() (*bool, bool) {
	if o == nil || IsNil(o.IsMerchant) {
		return nil, false
	}
	return o.IsMerchant, true
}

// HasIsMerchant returns a boolean if a field has been set.
func (o *TransactionRequest) HasIsMerchant() bool {
	if o != nil && !IsNil(o.IsMerchant) {
		return true
	}

	return false
}

// SetIsMerchant gets a reference to the given bool and assigns it to the IsMerchant field.
func (o *TransactionRequest) SetIsMerchant(v bool) {
	o.IsMerchant = &v
}

func (o TransactionRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["method_of_payment"] = o.MethodOfPayment
	if o.Products != nil {
		toSerialize["products"] = o.Products
	}
	if o.SuccessUrl.IsSet() {
		toSerialize["success_url"] = o.SuccessUrl.Get()
	}
	if o.ErrorUrl.IsSet() {
		toSerialize["error_url"] = o.ErrorUrl.Get()
	}
	if !IsNil(o.IsEscrow) {
		toSerialize["is_escrow"] = o.IsEscrow
	}
	if !IsNil(o.IsMerchant) {
		toSerialize["is_merchant"] = o.IsMerchant
	}
	return toSerialize, nil
}

func (o *TransactionRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"method_of_payment",
		"products",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransactionRequest := _TransactionRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransactionRequest)

	if err != nil {
		return err
	}

	*o = TransactionRequest(varTransactionRequest)

	return err
}

type NullableTransactionRequest struct {
	value *TransactionRequest
	isSet bool
}

func (v NullableTransactionRequest) Get() *TransactionRequest {
	return v.value
}

func (v *NullableTransactionRequest) Set(val *TransactionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionRequest(val *TransactionRequest) *NullableTransactionRequest {
	return &NullableTransactionRequest{value: val, isSet: true}
}

func (v NullableTransactionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


